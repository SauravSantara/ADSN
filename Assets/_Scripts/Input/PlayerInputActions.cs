//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/_Scripts/Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Shoot"",
            ""id"": ""76acbe3a-fb8c-4fe7-ad68-2e861a575141"",
            ""actions"": [
                {
                    ""name"": ""OnTriggerPull"",
                    ""type"": ""PassThrough"",
                    ""id"": ""52d3119d-9328-4ee5-ab31-590f2e5e8217"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""784a094b-41b9-4f2e-9ce6-9a191bd24044"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""pControlScheme"",
                    ""action"": ""OnTriggerPull"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c77c5dd9-086b-4c29-ac03-57b6e6f67132"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnTriggerPull"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""pActionMap"",
            ""id"": ""5248b758-a2fb-4dfb-9f52-76530d76bf60"",
            ""actions"": [
                {
                    ""name"": ""MouseLook"",
                    ""type"": ""Value"",
                    ""id"": ""74c682f8-aec5-4536-901d-a27903434584"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""5504668b-e73f-4d0d-9005-60d2f572fce6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8664c069-74a0-4b73-b8c6-e6267d908ddd"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce635cba-1999-4e14-928b-7d3c48d032d8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""pControlScheme"",
            ""bindingGroup"": ""pControlScheme"",
            ""devices"": []
        }
    ]
}");
        // Shoot
        m_Shoot = asset.FindActionMap("Shoot", throwIfNotFound: true);
        m_Shoot_OnTriggerPull = m_Shoot.FindAction("OnTriggerPull", throwIfNotFound: true);
        // pActionMap
        m_pActionMap = asset.FindActionMap("pActionMap", throwIfNotFound: true);
        m_pActionMap_MouseLook = m_pActionMap.FindAction("MouseLook", throwIfNotFound: true);
        m_pActionMap_Fire = m_pActionMap.FindAction("Fire", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Shoot
    private readonly InputActionMap m_Shoot;
    private List<IShootActions> m_ShootActionsCallbackInterfaces = new List<IShootActions>();
    private readonly InputAction m_Shoot_OnTriggerPull;
    public struct ShootActions
    {
        private @PlayerInputActions m_Wrapper;
        public ShootActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @OnTriggerPull => m_Wrapper.m_Shoot_OnTriggerPull;
        public InputActionMap Get() { return m_Wrapper.m_Shoot; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShootActions set) { return set.Get(); }
        public void AddCallbacks(IShootActions instance)
        {
            if (instance == null || m_Wrapper.m_ShootActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ShootActionsCallbackInterfaces.Add(instance);
            @OnTriggerPull.started += instance.OnOnTriggerPull;
            @OnTriggerPull.performed += instance.OnOnTriggerPull;
            @OnTriggerPull.canceled += instance.OnOnTriggerPull;
        }

        private void UnregisterCallbacks(IShootActions instance)
        {
            @OnTriggerPull.started -= instance.OnOnTriggerPull;
            @OnTriggerPull.performed -= instance.OnOnTriggerPull;
            @OnTriggerPull.canceled -= instance.OnOnTriggerPull;
        }

        public void RemoveCallbacks(IShootActions instance)
        {
            if (m_Wrapper.m_ShootActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IShootActions instance)
        {
            foreach (var item in m_Wrapper.m_ShootActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ShootActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ShootActions @Shoot => new ShootActions(this);

    // pActionMap
    private readonly InputActionMap m_pActionMap;
    private List<IPActionMapActions> m_PActionMapActionsCallbackInterfaces = new List<IPActionMapActions>();
    private readonly InputAction m_pActionMap_MouseLook;
    private readonly InputAction m_pActionMap_Fire;
    public struct PActionMapActions
    {
        private @PlayerInputActions m_Wrapper;
        public PActionMapActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseLook => m_Wrapper.m_pActionMap_MouseLook;
        public InputAction @Fire => m_Wrapper.m_pActionMap_Fire;
        public InputActionMap Get() { return m_Wrapper.m_pActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IPActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_PActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PActionMapActionsCallbackInterfaces.Add(instance);
            @MouseLook.started += instance.OnMouseLook;
            @MouseLook.performed += instance.OnMouseLook;
            @MouseLook.canceled += instance.OnMouseLook;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
        }

        private void UnregisterCallbacks(IPActionMapActions instance)
        {
            @MouseLook.started -= instance.OnMouseLook;
            @MouseLook.performed -= instance.OnMouseLook;
            @MouseLook.canceled -= instance.OnMouseLook;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
        }

        public void RemoveCallbacks(IPActionMapActions instance)
        {
            if (m_Wrapper.m_PActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_PActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PActionMapActions @pActionMap => new PActionMapActions(this);
    private int m_pControlSchemeSchemeIndex = -1;
    public InputControlScheme pControlSchemeScheme
    {
        get
        {
            if (m_pControlSchemeSchemeIndex == -1) m_pControlSchemeSchemeIndex = asset.FindControlSchemeIndex("pControlScheme");
            return asset.controlSchemes[m_pControlSchemeSchemeIndex];
        }
    }
    public interface IShootActions
    {
        void OnOnTriggerPull(InputAction.CallbackContext context);
    }
    public interface IPActionMapActions
    {
        void OnMouseLook(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
    }
}
